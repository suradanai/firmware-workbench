# Firmware Workbench

คู่มือการใช้งาน Firmware Workbench (FMK + Multi-Squash + Patch + Diff + AI)

ภาพรวม (Overview)
โปรแกรมนี้เป็น GUI ช่วยทำงานกับไฟล์เฟิร์มแวร์ Linux (โดยเฉพาะเราท์เตอร์/อุปกรณ์ IoT) รองรับ:
Extract เฟิร์มแวร์ ด้วย Firmware Mod Kit (FMK)
Multi-Squash (กรณีเฟิร์มแวร์มีหลาย SquashFS segment)
Patch ราย segment (รหัสผ่าน root, enable serial getty, telnet, ftp)
วิเคราะห์ (AI) ทีละ segment หรือทุก segment พร้อมกัน
ตรวจ diff (ไฟล์ที่เพิ่ม/ลบ/แก้) หลังแก้ rootfs
Predict ขนาด rootfs ใหม่ก่อน build (ลดความเสี่ยงขนาดเกิน)
Rebuild + Linksys footer fix (ถ้าจำเป็น)
ติดตั้ง/ลบ IPK package ภายใน rootfs
โครงสร้างโฟลเดอร์ที่แนะนำ
firmware-workbench/
app.py
fmk_integration.py
patch_utils.py
config.yaml
external/firmware_mod_kit/ (ซอร์ส FMK ที่ clone มา)
workspaces/ (สร้างอัตโนมัติสำหรับแต่ละงาน)
output/ (เก็บไฟล์ firmware ที่ build แล้ว)
input/ (ถ้าต้องการวางไฟล์)

ขั้นเตรียม (Prerequisites)

ระบบ: Linux (แนะนำ), WSL ก็ได้ (บางฟีเจอร์อาจจำกัด)
ติดตั้ง dependency (ใน virtualenv ก็ได้):
pip install -r requirements.txt
เตรียม FMK:
git clone https://github.com/rampageX/firmware-mod-kit.git external/firmware_mod_kit
cd external/firmware_mod_kit/src && make
ตรวจว่ามีคำสั่ง mksquashfs, unsquashfs (หรือใช้ตัวที่ FMK ให้มา)
หากจะใช้ฟังก์ชันที่ต้องการสิทธิ์ root (เช่นบางระบบไฟล์) ให้รันผ่าน sudo (ส่วนใหญ่ไม่จำเป็นในขั้นทดลอง patch เบื้องต้น)
เริ่มใช้งาน (Launch)
python app.py
โปรแกรมมีหลายแท็บ: Logs, AI, FMK / Patch, Diff Viewer

การเลือกไฟล์เฟิร์มแวร์

ไปแท็บ AI หรือ FMK / Patch → ปุ่ม “เลือกไฟล์”
ช่อง path จะแสดงไฟล์ที่เลือก (เช่น firmware.bin)
การตั้ง FMK root
หากไม่ตรวจพบอัตโนมัติ ใช้ปุ่ม “เลือก FMK Root” ชี้ไปยัง external/firmware_mod_kit
ปุ่ม Reload ใช้รีเฟรชหลังเปลี่ยนตำแหน่ง
การ Extract (โหมด Single)
ใช้เมื่อเฟิร์มแวร์มี rootfs เดียว
ขั้นตอน:
กรอกชื่อ Workspace (หรือปล่อยให้สร้างอัตโนมัติ)
ปุ่ม “Extract Single”
ผลลัพธ์: workspaces/<workspace>/rootfs, logs/config.log
หากเลือก Auto วิเคราะห์หลัง Extract โปรแกรมจะรัน AI ให้ (ถ้าคำนวณ offset ได้)
การ Extract (โหมด Multi-Squash)
ใช้เมื่อไฟล์มีหลาย SquashFS segment (เฟิร์มแวร์ที่แบ่ง rootfs หลายส่วน)
ขั้นตอน:
ปุ่ม “Extract Multi-Squash”
รายการ Segments จะปรากฏในกล่องซ้าย (เช่น firmware.bin_0, firmware.bin_1)
คลิกเลือกระบุ segment ที่จะทำงาน (rootfs ของ segment นั้นจะใช้สำหรับ patch / diff / AI ต่อไป)
การ Snapshot rootfs (อัตโนมัติ)
หลัง Extract โปรแกรมจะสร้างสำเนา rootfs_original เพื่อใช้เทียบ diff ภายหลัง (ถ้าไม่มีจะสร้างในครั้งแรกที่กด refresh diff)

การ Patch ต่อ Segment
ไปแท็บ FMK / Patch (กล่อง Patch Segment Rootfs):
ตัวเลือก:

Root Password: ใส่รหัสใหม่ (เว้นว่าง = ใส่ “!” ใน shadow → ล็อก)
Enable Serial Getty: เพิ่มบรรทัด getty ใน /etc/inittab ถ้าไม่มี
Enable Telnet: เพิ่มบรรทัดใน /etc/inetd.conf หรือสร้างสคริปต์ init.d
Enable FTP: เช่นเดียวกับ Telnet
ขั้นตอน:
เลือก segment (ถ้าเป็น multi)
ตั้งค่าตัวเลือก
กด “Apply Patch to Segment”
ดูผลใน Log และสามารถเปิด Diff Viewer ตรวจความเปลี่ยนแปลง เช่น /etc/shadow, /etc/inittab
การดู Diff (Diff Viewer Tab)
ปุ่ม “Refresh Diff List” → แสดงรายการไฟล์ Added (A), Removed (R), Modified (M)
คลิกไฟล์ → ส่วน Unified Diff จะปรากฏ (สำหรับไฟล์ข้อความ)
Binary หรือขนาดใหญ่เกิน (ค่าเกณฑ์ ~512KB) จะแจ้งไม่ diff
ปุ่ม “Export Selected Diff” → บันทึก .diff สำหรับไฟล์ที่เลือก
การติดตั้ง / ลบ IPK
ปุ่ม “Install IPK” → เลือกไฟล์ .ipk → จะติดตั้งเข้าระบบ rootfs (ของ segment ที่เลือกในโหมด multi หรือ rootfs หลัก)
ปุ่ม “Remove IPK” → เลือกไฟล์ .ipk ต้นฉบับ (ใช้เป็นตัวอ้างอิงเพื่อลบไฟล์)
หมายเหตุ: สคริปต์ ipkg_remove.sh เป็นแบบพื้นฐาน อาจไม่จัดการ dependency
การวิเคราะห์ AI (Segment เดียว)
ปุ่ม “วิเคราะห์ (AI) สำหรับ segment ที่เลือก/เดี่ยว” (ในแท็บ AI)
ต้องเคย Extract แล้ว ถึงจะมี offset / size สำหรับ rootfs
ผลวิเคราะห์จะระบุ boot delay, การมี telnet/ftp, root password, serial shell ฯลฯ
การวิเคราะห์ AI ทุก Segment (Multi-Squash)
ใช้เฉพาะตอนที่ Extract แบบ Multi แล้ว
ปุ่ม “วิเคราะห์ทุก Segment (AI ALL)”
โปรแกรมจะประมวลผลทีละ segment และรวมผล + สรุปความเสี่ยง (เช่น root ไม่มีรหัส, telnet เปิด)
Predict RootFS Size ก่อน Build
ปุ่ม “Predict RootFS Size”
โปรแกรมจะสร้าง squashfs ชั่วคราวเพื่อวัดขนาดบีบอัดจริง (ต้องใช้ mksquashfs)
เปรียบเทียบกับ span เดิม (พื้นที่อนุญาต)
ถ้าเกินหรือเหลือพื้นที่น้อย จะแจ้งเตือน
การ Build Firmware
ตั้งค่า:
-nopad (ไม่เติม padding)
-min (บังคับ blocksize 1MB เพื่อลดขนาด แต่กิน RAM บนอุปกรณ์)
Linksys Footer Fix (ถ้าตรวจพบ pattern และติ๊ก)
ปุ่ม “Build”
โหมด Single → build-firmware.sh
โหมด Multi → build-multisquashfs-firmware.sh
ผลลัพธ์: workspaces/<workspace>/new-firmware.bin และก็อปไป output/rebuilt_<original>
ถ้าเลือก Linksys footer โปรแกรมจะเรียก linksys_footer.sh เพื่อแก้ checksum/footer
ข้อควรระวังด้านความปลอดภัย
อย่าปล่อย root ไม่มีรหัสผ่านหากจะใช้จริง
การเปิด Telnet/FTP เป็นความเสี่ยง (ใช้เพื่อ debug เท่านั้น)
แนะนำใช้ SSH (dropbear/openssh) แทนหากต้องใช้งานระยะไกล
ตรวจขนาดไฟล์หลัง build ต้องไม่ใหญ่เกินเดิมในบางอุปกรณ์ (bootloader ตรวจ)
ปัญหาที่พบบ่อย / Troubleshooting
Extract ล้มเหลว: ตรวจว่าไฟล์เฟิร์มแวร์ไม่ได้ถูกเปิดทับ, ใช้ binwalk ได้ตามปกติ, หรือเฟิร์มแวร์ format ไม่รองรับ
Multi-Squash ไม่เจอ segment: เฟิร์มแวร์อาจไม่มีหลาย squashfs จริง
Predict error: ไม่เจอ mksquashfs (ติดตั้งแพ็กเกจ squashfs-tools หรือใช้ MKFS ที่ FMK บันทึกใน config.log)
AI ไม่พบ offset: ต้อง Extract ก่อนเท่านั้น
Patch root password ล้มเหลว: ไม่มี /etc/shadow ใน rootfs หรือเป็นระบบ init รูปแบบอื่น
Diff ว่าง: ยังไม่เกิดการเปลี่ยนไฟล์ (หรือ snapshot ไม่ถูกสร้างให้ refresh อีกครั้ง)
แนวทางทำงานที่แนะนำ (Workflow Example)
กรณี Single:
เลือก firmware.bin
Extract Single
(Auto AI) ตรวจผล
Patch root password + เปิด serial shell
ตรวจ diff
Predict RootFS Size
Build และตรวจ output/new-firmware.bin
Flash (ทดสอบในเครื่องจำลอง / hardware test)
กรณี Multi-Squash:

Extract Multi-Squash
เลือก segment ที่เกี่ยวข้อง (เช่น segment 1 = rootfs ที่ต้องแก้)
Snapshot ถูกสร้างอัตโนมัติ
Patch → Telnet/FTP/Password
Refresh Diff → ตรวจเฉพาะไฟล์สำคัญ
AI ตรวจ segment ปัจจุบัน หรือ AI ALL เพื่อดูภาพรวม
Predict ขนาด segment นั้น
Build Multi
Flash / ทดสอบ
เคล็ดลับ (Tips)
ถ้าขนาด rootfs ใกล้เต็ม ให้พิจารณาลบหน้าเว็บไม่จำเป็น (html/js) หรือ binary ที่ไม่ได้ใช้
หากต้องการความแม่นยำด้านความปลอดภัยเพิ่มเติม สามารถเพิ่ม signature scan (เช่นตรวจ dropbear, busybox version, hardcoded key) ในอนาคต
หากไฟล์ใหญ่ → ใช้ -min เพื่อ blocksize 1MB (ระวังอุปกรณ์ RAM น้อย)
เก็บ backup เฟิร์มแวร์ต้นฉบับเสมอ
การขยายในอนาคต (Future Ideas)
Profiles (Dev / Harden) อัตโนมัติ
Plugin Vendor (TP-Link checksum, Buffalo encryption)
Pure Python squashfs build (ลด dependency)
Side-by-side diff viewer
รายงานรวม (AI + Diff + Patch summary export)
ปุ่ม/องค์ประกอบสำคัญสรุป
Extract Single / Extract Multi-Squash
Segment list (เลือก rootfs เป้าหมาย)
Patch Segment Rootfs (ตั้งรหัส / เปิดบริการ)
Diff Viewer (Refresh / Export)
Predict RootFS Size (ก่อน Build)
Build (พร้อม -nopad / -min / Linksys footer)
AI (Single / All)
ความปลอดภัยในการ Flash
ตรวจ checksum (SHA256) ก่อนและหลัง build เพื่อมั่นใจว่าไฟล์ไม่ corruption
ถ้ามี footer/หัวข้อเฉพาะ vendor จำเป็นต้องใช้ post-process (โปรแกรมพยายาม detect ให้)
ทดลองในอุปกรณ์สำรองหรือใช้ SPI programmer/JTAG พร้อมกู้คืน
การล้าง (Cleanup)
ลบ workspace เก่าใน workspaces/ ที่ไม่ใช้แล้วด้วยตนเอง
เก็บเฉพาะ rebuilt firmware ที่ผ่านการทดสอบ
หากคุณต้องการเอกสารรูป PDF / README ย่อ หรือสคริปต์อัตโนมัติ build+patch+analyze เพิ่มเติม แจ้งได้ครับ!
